//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TransafeRx.Shared.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TransafeRxEntities : DbContext
    {
        public TransafeRxEntities()
            : base("name=TransafeRxEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdherenceProtocol> AdherenceProtocols { get; set; }
        public virtual DbSet<Admission> Admissions { get; set; }
        public virtual DbSet<ApplicationSetting> ApplicationSettings { get; set; }
        public virtual DbSet<AppVersion> AppVersions { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<BloodGlucoseMeasurement> BloodGlucoseMeasurements { get; set; }
        public virtual DbSet<BloodPressureMeasurement> BloodPressureMeasurements { get; set; }
        public virtual DbSet<Calendar> Calendars { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<DeviceToken> DeviceTokens { get; set; }
        public virtual DbSet<Font> Fonts { get; set; }
        public virtual DbSet<ItemLogic> ItemLogics { get; set; }
        public virtual DbSet<ItemLogicAction> ItemLogicActions { get; set; }
        public virtual DbSet<ItemLogicEvent> ItemLogicEvents { get; set; }
        public virtual DbSet<ItemNavigation> ItemNavigations { get; set; }
        public virtual DbSet<ItemNavigationTemplate> ItemNavigationTemplates { get; set; }
        public virtual DbSet<ItemNavigationType> ItemNavigationTypes { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemTemplate> ItemTemplates { get; set; }
        public virtual DbSet<ItemToolbarItem> ItemToolbarItems { get; set; }
        public virtual DbSet<ItemTransitionType> ItemTransitionTypes { get; set; }
        public virtual DbSet<ItemType> ItemTypes { get; set; }
        public virtual DbSet<LoginInformation> LoginInformations { get; set; }
        public virtual DbSet<LU_AdmissionTypes> LU_AdmissionTypes { get; set; }
        public virtual DbSet<LU_AppId> LU_AppId { get; set; }
        public virtual DbSet<LU_DeviceTokenTypes> LU_DeviceTokenTypes { get; set; }
        public virtual DbSet<LU_MedicationActivityTypes> LU_MedicationActivityTypes { get; set; }
        public virtual DbSet<LU_NotificationType> LU_NotificationType { get; set; }
        public virtual DbSet<MedicationActivity> MedicationActivities { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<Message1> Messages1 { get; set; }
        public virtual DbSet<NotificationMessage> NotificationMessages { get; set; }
        public virtual DbSet<NotificationPreference> NotificationPreferences { get; set; }
        public virtual DbSet<PatientMedPhase> PatientMedPhases { get; set; }
        public virtual DbSet<PatientMessageSent> PatientMessageSents { get; set; }
        public virtual DbSet<PatientSMSMessage> PatientSMSMessages { get; set; }
        public virtual DbSet<PersonalizedMessageType> PersonalizedMessageTypes { get; set; }
        public virtual DbSet<PhoneNumber> PhoneNumbers { get; set; }
        public virtual DbSet<Placeholder> Placeholders { get; set; }
        public virtual DbSet<RefreshToken> RefreshTokens { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<SurveyAnswer> SurveyAnswers { get; set; }
        public virtual DbSet<SurveyOptionGroup> SurveyOptionGroups { get; set; }
        public virtual DbSet<SurveyOption> SurveyOptions { get; set; }
        public virtual DbSet<SurveyQuestionCategory> SurveyQuestionCategories { get; set; }
        public virtual DbSet<SurveyQuestionLogic> SurveyQuestionLogics { get; set; }
        public virtual DbSet<SurveyQuestionLogicAction> SurveyQuestionLogicActions { get; set; }
        public virtual DbSet<SurveyQuestionOption> SurveyQuestionOptions { get; set; }
        public virtual DbSet<SurveyQuestion> SurveyQuestions { get; set; }
        public virtual DbSet<SurveyQuestionType> SurveyQuestionTypes { get; set; }
        public virtual DbSet<Survey> Surveys { get; set; }
        public virtual DbSet<SurveySession> SurveySessions { get; set; }
        public virtual DbSet<Theme> Themes { get; set; }
        public virtual DbSet<ToolbarItemAction> ToolbarItemActions { get; set; }
        public virtual DbSet<ToolbarItemNavigation> ToolbarItemNavigations { get; set; }
        public virtual DbSet<ToolbarItem> ToolbarItems { get; set; }
        public virtual DbSet<UserMedication> UserMedications { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Interval> Intervals { get; set; }
        public virtual DbSet<VersionInfo> VersionInfoes { get; set; }
        public virtual DbSet<Zone> Zones { get; set; }
        public virtual DbSet<Score> Scores { get; set; }
        public virtual DbSet<Sequencer> Sequencers { get; set; }
    
        public virtual int AddAdmission(string userId, Nullable<int> admissionTypeId, Nullable<System.DateTime> admissionDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var admissionTypeIdParameter = admissionTypeId.HasValue ?
                new ObjectParameter("admissionTypeId", admissionTypeId) :
                new ObjectParameter("admissionTypeId", typeof(int));
    
            var admissionDateParameter = admissionDate.HasValue ?
                new ObjectParameter("admissionDate", admissionDate) :
                new ObjectParameter("admissionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAdmission", userIdParameter, admissionTypeIdParameter, admissionDateParameter);
        }
    
        public virtual int AddBloodGlucoseMeasurement(string userId, Nullable<int> glucoseLevel, Nullable<System.DateTime> readingDate, string model)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var glucoseLevelParameter = glucoseLevel.HasValue ?
                new ObjectParameter("glucoseLevel", glucoseLevel) :
                new ObjectParameter("glucoseLevel", typeof(int));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("readingDate", readingDate) :
                new ObjectParameter("readingDate", typeof(System.DateTime));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBloodGlucoseMeasurement", userIdParameter, glucoseLevelParameter, readingDateParameter, modelParameter);
        }
    
        public virtual int AddBloodGlucoseMeasurementModified(string userId, Nullable<int> glucoseLevel, Nullable<System.DateTime> readingDate, string modifiedBy)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var glucoseLevelParameter = glucoseLevel.HasValue ?
                new ObjectParameter("glucoseLevel", glucoseLevel) :
                new ObjectParameter("glucoseLevel", typeof(int));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("readingDate", readingDate) :
                new ObjectParameter("readingDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBloodGlucoseMeasurementModified", userIdParameter, glucoseLevelParameter, readingDateParameter, modifiedByParameter);
        }
    
        public virtual int AddBloodPressureMeasurement(string userId, Nullable<int> systolic, Nullable<int> diastolic, Nullable<int> pulse, Nullable<System.DateTime> readingDate, string model)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var systolicParameter = systolic.HasValue ?
                new ObjectParameter("systolic", systolic) :
                new ObjectParameter("systolic", typeof(int));
    
            var diastolicParameter = diastolic.HasValue ?
                new ObjectParameter("diastolic", diastolic) :
                new ObjectParameter("diastolic", typeof(int));
    
            var pulseParameter = pulse.HasValue ?
                new ObjectParameter("pulse", pulse) :
                new ObjectParameter("pulse", typeof(int));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("readingDate", readingDate) :
                new ObjectParameter("readingDate", typeof(System.DateTime));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBloodPressureMeasurement", userIdParameter, systolicParameter, diastolicParameter, pulseParameter, readingDateParameter, modelParameter);
        }
    
        public virtual int AddBloodPressureMeasurementWithModified(string userId, Nullable<int> systolic, Nullable<int> diastolic, Nullable<int> pulse, Nullable<System.DateTime> readingDate, string modifiedBy)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var systolicParameter = systolic.HasValue ?
                new ObjectParameter("systolic", systolic) :
                new ObjectParameter("systolic", typeof(int));
    
            var diastolicParameter = diastolic.HasValue ?
                new ObjectParameter("diastolic", diastolic) :
                new ObjectParameter("diastolic", typeof(int));
    
            var pulseParameter = pulse.HasValue ?
                new ObjectParameter("pulse", pulse) :
                new ObjectParameter("pulse", typeof(int));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("readingDate", readingDate) :
                new ObjectParameter("readingDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBloodPressureMeasurementWithModified", userIdParameter, systolicParameter, diastolicParameter, pulseParameter, readingDateParameter, modifiedByParameter);
        }
    
        public virtual int AddDeviceToken(string userId, Nullable<int> tokenTypeId, string token)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var tokenTypeIdParameter = tokenTypeId.HasValue ?
                new ObjectParameter("tokenTypeId", tokenTypeId) :
                new ObjectParameter("tokenTypeId", typeof(int));
    
            var tokenParameter = token != null ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDeviceToken", userIdParameter, tokenTypeIdParameter, tokenParameter);
        }
    
        public virtual int AddLoginInformation(string userId, Nullable<System.DateTimeOffset> dateDTO, string longitude, string latitude, string model, string os, string network, string phoneType, string appVersion, string dateCTZ)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var dateDTOParameter = dateDTO.HasValue ?
                new ObjectParameter("dateDTO", dateDTO) :
                new ObjectParameter("dateDTO", typeof(System.DateTimeOffset));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var osParameter = os != null ?
                new ObjectParameter("os", os) :
                new ObjectParameter("os", typeof(string));
    
            var networkParameter = network != null ?
                new ObjectParameter("network", network) :
                new ObjectParameter("network", typeof(string));
    
            var phoneTypeParameter = phoneType != null ?
                new ObjectParameter("phoneType", phoneType) :
                new ObjectParameter("phoneType", typeof(string));
    
            var appVersionParameter = appVersion != null ?
                new ObjectParameter("appVersion", appVersion) :
                new ObjectParameter("appVersion", typeof(string));
    
            var dateCTZParameter = dateCTZ != null ?
                new ObjectParameter("dateCTZ", dateCTZ) :
                new ObjectParameter("dateCTZ", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLoginInformation", userIdParameter, dateDTOParameter, longitudeParameter, latitudeParameter, modelParameter, osParameter, networkParameter, phoneTypeParameter, appVersionParameter, dateCTZParameter);
        }
    
        public virtual int AddMedicationActivity(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMedicationActivity", userIdParameter);
        }
    
        public virtual int AddMedicationActivityAdmitted(string userId, Nullable<int> scheduleId, Nullable<int> userMedicationId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("scheduleId", scheduleId) :
                new ObjectParameter("scheduleId", typeof(int));
    
            var userMedicationIdParameter = userMedicationId.HasValue ?
                new ObjectParameter("userMedicationId", userMedicationId) :
                new ObjectParameter("userMedicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMedicationActivityAdmitted", userIdParameter, scheduleIdParameter, userMedicationIdParameter);
        }
    
        public virtual int AddMessage(Nullable<int> scheduleId, string error, Nullable<int> tokenId)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("scheduleId", scheduleId) :
                new ObjectParameter("scheduleId", typeof(int));
    
            var errorParameter = error != null ?
                new ObjectParameter("error", error) :
                new ObjectParameter("error", typeof(string));
    
            var tokenIdParameter = tokenId.HasValue ?
                new ObjectParameter("tokenId", tokenId) :
                new ObjectParameter("tokenId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMessage", scheduleIdParameter, errorParameter, tokenIdParameter);
        }
    
        public virtual int AddNotificationMessage(string userId, Nullable<int> notificationTypeId, Nullable<int> tokenId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("notificationTypeId", notificationTypeId) :
                new ObjectParameter("notificationTypeId", typeof(int));
    
            var tokenIdParameter = tokenId.HasValue ?
                new ObjectParameter("tokenId", tokenId) :
                new ObjectParameter("tokenId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNotificationMessage", userIdParameter, notificationTypeIdParameter, tokenIdParameter);
        }
    
        public virtual int AddPatientSMS(string userId, string message, string sentBy, string phoneNumberUser)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var sentByParameter = sentBy != null ?
                new ObjectParameter("sentBy", sentBy) :
                new ObjectParameter("sentBy", typeof(string));
    
            var phoneNumberUserParameter = phoneNumberUser != null ?
                new ObjectParameter("phoneNumberUser", phoneNumberUser) :
                new ObjectParameter("phoneNumberUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPatientSMS", userIdParameter, messageParameter, sentByParameter, phoneNumberUserParameter);
        }
    
        public virtual int AddPersonalizedSurveyMessageHistory(string patientId, Nullable<int> messageId)
        {
            var patientIdParameter = patientId != null ?
                new ObjectParameter("patientId", patientId) :
                new ObjectParameter("patientId", typeof(string));
    
            var messageIdParameter = messageId.HasValue ?
                new ObjectParameter("messageId", messageId) :
                new ObjectParameter("messageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPersonalizedSurveyMessageHistory", patientIdParameter, messageIdParameter);
        }
    
        public virtual int AddSurveyAnswers(Nullable<int> surveyId, string userId, Nullable<int> sessionId, Nullable<int> questionId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSurveyAnswers", surveyIdParameter, userIdParameter, sessionIdParameter, questionIdParameter);
        }
    
        public virtual int AddSurveySession(Nullable<int> surveyId, string userId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSurveySession", surveyIdParameter, userIdParameter);
        }
    
        public virtual int AddUpdateAllUserMedicationFromEPIC()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateAllUserMedicationFromEPIC");
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateItem(Nullable<int> itemId, Nullable<int> itemTypeId, string name, Nullable<int> templateId, string userId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("itemTypeId", itemTypeId) :
                new ObjectParameter("itemTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("templateId", templateId) :
                new ObjectParameter("templateId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateItem", itemIdParameter, itemTypeIdParameter, nameParameter, templateIdParameter, userIdParameter);
        }
    
        public virtual int AddUpdateMedicationSchedules(ObjectParameter groupId)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateMedicationSchedules", groupId);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateNotificationPreference(Nullable<int> notificationPreferenceId, string userId, Nullable<int> notificationTypeId, Nullable<int> notificationDays)
        {
            var notificationPreferenceIdParameter = notificationPreferenceId.HasValue ?
                new ObjectParameter("notificationPreferenceId", notificationPreferenceId) :
                new ObjectParameter("notificationPreferenceId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("notificationTypeId", notificationTypeId) :
                new ObjectParameter("notificationTypeId", typeof(int));
    
            var notificationDaysParameter = notificationDays.HasValue ?
                new ObjectParameter("notificationDays", notificationDays) :
                new ObjectParameter("notificationDays", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateNotificationPreference", notificationPreferenceIdParameter, userIdParameter, notificationTypeIdParameter, notificationDaysParameter);
        }
    
        public virtual int AddUpdateSurvey(Nullable<int> surveyId, Nullable<bool> allowRestart)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            var allowRestartParameter = allowRestart.HasValue ?
                new ObjectParameter("allowRestart", allowRestart) :
                new ObjectParameter("allowRestart", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateSurvey", surveyIdParameter, allowRestartParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateSurveyOption(Nullable<int> optionId, Nullable<int> groupId, string optionText)
        {
            var optionIdParameter = optionId.HasValue ?
                new ObjectParameter("optionId", optionId) :
                new ObjectParameter("optionId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("groupId", groupId) :
                new ObjectParameter("groupId", typeof(int));
    
            var optionTextParameter = optionText != null ?
                new ObjectParameter("optionText", optionText) :
                new ObjectParameter("optionText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateSurveyOption", optionIdParameter, groupIdParameter, optionTextParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateSurveyOptionGroup(Nullable<int> groupId, string name)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("groupId", groupId) :
                new ObjectParameter("groupId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateSurveyOptionGroup", groupIdParameter, nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateSurveyQuestion(Nullable<int> questionId, Nullable<int> surveyId, Nullable<int> questionTypeId, string name, string questionText, string questionImage, string optionImage, string body, Nullable<bool> required)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            var questionTypeIdParameter = questionTypeId.HasValue ?
                new ObjectParameter("questionTypeId", questionTypeId) :
                new ObjectParameter("questionTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var questionTextParameter = questionText != null ?
                new ObjectParameter("questionText", questionText) :
                new ObjectParameter("questionText", typeof(string));
    
            var questionImageParameter = questionImage != null ?
                new ObjectParameter("questionImage", questionImage) :
                new ObjectParameter("questionImage", typeof(string));
    
            var optionImageParameter = optionImage != null ?
                new ObjectParameter("optionImage", optionImage) :
                new ObjectParameter("optionImage", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("body", body) :
                new ObjectParameter("body", typeof(string));
    
            var requiredParameter = required.HasValue ?
                new ObjectParameter("required", required) :
                new ObjectParameter("required", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateSurveyQuestion", questionIdParameter, surveyIdParameter, questionTypeIdParameter, nameParameter, questionTextParameter, questionImageParameter, optionImageParameter, bodyParameter, requiredParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateSurveyQuestionCategory(Nullable<int> categoryId, Nullable<int> questionId, string name)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateSurveyQuestionCategory", categoryIdParameter, questionIdParameter, nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateSurveyQuestionLogic(Nullable<int> logicId, Nullable<int> questionId, Nullable<int> actionId, Nullable<int> actionQuestionId, string expression, string components)
        {
            var logicIdParameter = logicId.HasValue ?
                new ObjectParameter("logicId", logicId) :
                new ObjectParameter("logicId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            var actionIdParameter = actionId.HasValue ?
                new ObjectParameter("actionId", actionId) :
                new ObjectParameter("actionId", typeof(int));
    
            var actionQuestionIdParameter = actionQuestionId.HasValue ?
                new ObjectParameter("actionQuestionId", actionQuestionId) :
                new ObjectParameter("actionQuestionId", typeof(int));
    
            var expressionParameter = expression != null ?
                new ObjectParameter("expression", expression) :
                new ObjectParameter("expression", typeof(string));
    
            var componentsParameter = components != null ?
                new ObjectParameter("components", components) :
                new ObjectParameter("components", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateSurveyQuestionLogic", logicIdParameter, questionIdParameter, actionIdParameter, actionQuestionIdParameter, expressionParameter, componentsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateSurveyQuestionOption(Nullable<int> optionId, Nullable<int> questionId, Nullable<int> categoryId, string optionText, string optionImage, Nullable<int> optionValue, Nullable<int> shapeType, string coordinates, string feedback)
        {
            var optionIdParameter = optionId.HasValue ?
                new ObjectParameter("optionId", optionId) :
                new ObjectParameter("optionId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var optionTextParameter = optionText != null ?
                new ObjectParameter("optionText", optionText) :
                new ObjectParameter("optionText", typeof(string));
    
            var optionImageParameter = optionImage != null ?
                new ObjectParameter("optionImage", optionImage) :
                new ObjectParameter("optionImage", typeof(string));
    
            var optionValueParameter = optionValue.HasValue ?
                new ObjectParameter("optionValue", optionValue) :
                new ObjectParameter("optionValue", typeof(int));
    
            var shapeTypeParameter = shapeType.HasValue ?
                new ObjectParameter("shapeType", shapeType) :
                new ObjectParameter("shapeType", typeof(int));
    
            var coordinatesParameter = coordinates != null ?
                new ObjectParameter("coordinates", coordinates) :
                new ObjectParameter("coordinates", typeof(string));
    
            var feedbackParameter = feedback != null ?
                new ObjectParameter("feedback", feedback) :
                new ObjectParameter("feedback", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateSurveyQuestionOption", optionIdParameter, questionIdParameter, categoryIdParameter, optionTextParameter, optionImageParameter, optionValueParameter, shapeTypeParameter, coordinatesParameter, feedbackParameter);
        }
    
        public virtual ObjectResult<AddUpdateSurveySession_Result> AddUpdateSurveySession(Nullable<int> sessionId, Nullable<int> surveyId, string userId, Nullable<System.DateTime> startDateUTC, Nullable<System.DateTimeOffset> startDateDTO, string startDateCTZ, Nullable<System.DateTime> endDateUTC, Nullable<System.DateTimeOffset> endDateDTO, string endDateCTZ)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateUTCParameter = startDateUTC.HasValue ?
                new ObjectParameter("startDateUTC", startDateUTC) :
                new ObjectParameter("startDateUTC", typeof(System.DateTime));
    
            var startDateDTOParameter = startDateDTO.HasValue ?
                new ObjectParameter("startDateDTO", startDateDTO) :
                new ObjectParameter("startDateDTO", typeof(System.DateTimeOffset));
    
            var startDateCTZParameter = startDateCTZ != null ?
                new ObjectParameter("startDateCTZ", startDateCTZ) :
                new ObjectParameter("startDateCTZ", typeof(string));
    
            var endDateUTCParameter = endDateUTC.HasValue ?
                new ObjectParameter("endDateUTC", endDateUTC) :
                new ObjectParameter("endDateUTC", typeof(System.DateTime));
    
            var endDateDTOParameter = endDateDTO.HasValue ?
                new ObjectParameter("endDateDTO", endDateDTO) :
                new ObjectParameter("endDateDTO", typeof(System.DateTimeOffset));
    
            var endDateCTZParameter = endDateCTZ != null ?
                new ObjectParameter("endDateCTZ", endDateCTZ) :
                new ObjectParameter("endDateCTZ", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddUpdateSurveySession_Result>("AddUpdateSurveySession", sessionIdParameter, surveyIdParameter, userIdParameter, startDateUTCParameter, startDateDTOParameter, startDateCTZParameter, endDateUTCParameter, endDateDTOParameter, endDateCTZParameter);
        }
    
        public virtual ObjectResult<string> AddUpdateUser(string userId, string roleId, string firstName, string lastName, string phoneNumber, Nullable<System.DateTime> dob, string address, string apnsToken, string gcmToken, string mrn, string userName, Nullable<bool> isActive, Nullable<int> researchNumber, Nullable<bool> disableMotivationalMessages)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var roleIdParameter = roleId != null ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var apnsTokenParameter = apnsToken != null ?
                new ObjectParameter("apnsToken", apnsToken) :
                new ObjectParameter("apnsToken", typeof(string));
    
            var gcmTokenParameter = gcmToken != null ?
                new ObjectParameter("gcmToken", gcmToken) :
                new ObjectParameter("gcmToken", typeof(string));
    
            var mrnParameter = mrn != null ?
                new ObjectParameter("mrn", mrn) :
                new ObjectParameter("mrn", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var researchNumberParameter = researchNumber.HasValue ?
                new ObjectParameter("researchNumber", researchNumber) :
                new ObjectParameter("researchNumber", typeof(int));
    
            var disableMotivationalMessagesParameter = disableMotivationalMessages.HasValue ?
                new ObjectParameter("disableMotivationalMessages", disableMotivationalMessages) :
                new ObjectParameter("disableMotivationalMessages", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AddUpdateUser", userIdParameter, roleIdParameter, firstNameParameter, lastNameParameter, phoneNumberParameter, dobParameter, addressParameter, apnsTokenParameter, gcmTokenParameter, mrnParameter, userNameParameter, isActiveParameter, researchNumberParameter, disableMotivationalMessagesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateUserMedication(Nullable<int> userMedicationId, string userId, Nullable<System.DateTime> startDate, string route, string instructions, Nullable<int> daysSupply, Nullable<System.DateTime> createdDateUTC, Nullable<System.DateTimeOffset> createdDateDTO, string createdDateCTZ, Nullable<System.DateTime> updatedDateUTC, Nullable<System.DateTimeOffset> updatedDateDTO, string updatedDateCTZ)
        {
            var userMedicationIdParameter = userMedicationId.HasValue ?
                new ObjectParameter("userMedicationId", userMedicationId) :
                new ObjectParameter("userMedicationId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var routeParameter = route != null ?
                new ObjectParameter("route", route) :
                new ObjectParameter("route", typeof(string));
    
            var instructionsParameter = instructions != null ?
                new ObjectParameter("instructions", instructions) :
                new ObjectParameter("instructions", typeof(string));
    
            var daysSupplyParameter = daysSupply.HasValue ?
                new ObjectParameter("daysSupply", daysSupply) :
                new ObjectParameter("daysSupply", typeof(int));
    
            var createdDateUTCParameter = createdDateUTC.HasValue ?
                new ObjectParameter("createdDateUTC", createdDateUTC) :
                new ObjectParameter("createdDateUTC", typeof(System.DateTime));
    
            var createdDateDTOParameter = createdDateDTO.HasValue ?
                new ObjectParameter("createdDateDTO", createdDateDTO) :
                new ObjectParameter("createdDateDTO", typeof(System.DateTimeOffset));
    
            var createdDateCTZParameter = createdDateCTZ != null ?
                new ObjectParameter("createdDateCTZ", createdDateCTZ) :
                new ObjectParameter("createdDateCTZ", typeof(string));
    
            var updatedDateUTCParameter = updatedDateUTC.HasValue ?
                new ObjectParameter("updatedDateUTC", updatedDateUTC) :
                new ObjectParameter("updatedDateUTC", typeof(System.DateTime));
    
            var updatedDateDTOParameter = updatedDateDTO.HasValue ?
                new ObjectParameter("updatedDateDTO", updatedDateDTO) :
                new ObjectParameter("updatedDateDTO", typeof(System.DateTimeOffset));
    
            var updatedDateCTZParameter = updatedDateCTZ != null ?
                new ObjectParameter("updatedDateCTZ", updatedDateCTZ) :
                new ObjectParameter("updatedDateCTZ", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateUserMedication", userMedicationIdParameter, userIdParameter, startDateParameter, routeParameter, instructionsParameter, daysSupplyParameter, createdDateUTCParameter, createdDateDTOParameter, createdDateCTZParameter, updatedDateUTCParameter, updatedDateDTOParameter, updatedDateCTZParameter);
        }
    
        public virtual int AddUpdateUserMedicationFromCurrentMed(string alphaId)
        {
            var alphaIdParameter = alphaId != null ?
                new ObjectParameter("alphaId", alphaId) :
                new ObjectParameter("alphaId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateUserMedicationFromCurrentMed", alphaIdParameter);
        }
    
        public virtual int AddUpdateUserMedicationFromEPIC(string mRN)
        {
            var mRNParameter = mRN != null ?
                new ObjectParameter("MRN", mRN) :
                new ObjectParameter("MRN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateUserMedicationFromEPIC", mRNParameter);
        }
    
        public virtual int AddUpdateUserMedicationFromMedDispensed(string alphaId)
        {
            var alphaIdParameter = alphaId != null ?
                new ObjectParameter("alphaId", alphaId) :
                new ObjectParameter("alphaId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateUserMedicationFromMedDispensed", alphaIdParameter);
        }
    
        public virtual int AddUserMedicationScheduleFromEpic(Nullable<int> userMedicationId)
        {
            var userMedicationIdParameter = userMedicationId.HasValue ?
                new ObjectParameter("userMedicationId", userMedicationId) :
                new ObjectParameter("userMedicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserMedicationScheduleFromEpic", userMedicationIdParameter);
        }
    
        public virtual int BulkInsertAppointments(string fileName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BulkInsertAppointments", fileNameParameter);
        }
    
        public virtual int BulkInsertCurrentMeds(string fileName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BulkInsertCurrentMeds", fileNameParameter);
        }
    
        public virtual int BulkInsertMedsDispensed(string fileName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BulkInsertMedsDispensed", fileNameParameter);
        }
    
        public virtual int BulkInsertRosterClarity(string fileName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BulkInsertRosterClarity", fileNameParameter);
        }
    
        public virtual int BulkInsertTacrolimus(string fileName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BulkInsertTacrolimus", fileNameParameter);
        }
    
        public virtual int CalculateMedChanges()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculateMedChanges");
        }
    
        public virtual int CalculateRefillAdherence(string mrn, ObjectParameter score)
        {
            var mrnParameter = mrn != null ?
                new ObjectParameter("mrn", mrn) :
                new ObjectParameter("mrn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculateRefillAdherence", mrnParameter, score);
        }
    
        public virtual int CalculateRiskLevel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculateRiskLevel");
        }
    
        public virtual int ChangeSurveyOptionOrder(Nullable<int> optionId, Nullable<int> order)
        {
            var optionIdParameter = optionId.HasValue ?
                new ObjectParameter("optionId", optionId) :
                new ObjectParameter("optionId", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeSurveyOptionOrder", optionIdParameter, orderParameter);
        }
    
        public virtual int ChangeSurveyQuestionCategoryOrder(Nullable<int> categoryId, Nullable<int> order)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeSurveyQuestionCategoryOrder", categoryIdParameter, orderParameter);
        }
    
        public virtual int ChangeSurveyQuestionOptionOrder(Nullable<int> optionId, Nullable<int> order)
        {
            var optionIdParameter = optionId.HasValue ?
                new ObjectParameter("optionId", optionId) :
                new ObjectParameter("optionId", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeSurveyQuestionOptionOrder", optionIdParameter, orderParameter);
        }
    
        public virtual int ChangeSurveyQuestionOrder(Nullable<int> questionId, Nullable<int> order)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeSurveyQuestionOrder", questionIdParameter, orderParameter);
        }
    
        public virtual int CompleteSurveySession(Nullable<int> sessionId, Nullable<System.DateTime> endDateUTC, Nullable<System.DateTimeOffset> endDateDTO, string endDateCTZ)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            var endDateUTCParameter = endDateUTC.HasValue ?
                new ObjectParameter("endDateUTC", endDateUTC) :
                new ObjectParameter("endDateUTC", typeof(System.DateTime));
    
            var endDateDTOParameter = endDateDTO.HasValue ?
                new ObjectParameter("endDateDTO", endDateDTO) :
                new ObjectParameter("endDateDTO", typeof(System.DateTimeOffset));
    
            var endDateCTZParameter = endDateCTZ != null ?
                new ObjectParameter("endDateCTZ", endDateCTZ) :
                new ObjectParameter("endDateCTZ", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompleteSurveySession", sessionIdParameter, endDateUTCParameter, endDateDTOParameter, endDateCTZParameter);
        }
    
        public virtual int CreateDailyUserMedicationSchedule(Nullable<int> userMedicationId, Nullable<System.TimeSpan> time)
        {
            var userMedicationIdParameter = userMedicationId.HasValue ?
                new ObjectParameter("userMedicationId", userMedicationId) :
                new ObjectParameter("userMedicationId", typeof(int));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateDailyUserMedicationSchedule", userMedicationIdParameter, timeParameter);
        }
    
        public virtual int Daily_CalculateCTL_SCN_MedAdh()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Daily_CalculateCTL_SCN_MedAdh");
        }
    
        public virtual int Daily_CalculateInterventionMedAdhAndMsgs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Daily_CalculateInterventionMedAdhAndMsgs");
        }
    
        public virtual int DeleteBPReading(Nullable<int> bloodPressureId)
        {
            var bloodPressureIdParameter = bloodPressureId.HasValue ?
                new ObjectParameter("bloodPressureId", bloodPressureId) :
                new ObjectParameter("bloodPressureId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBPReading", bloodPressureIdParameter);
        }
    
        public virtual int DeleteGlucoseReading(Nullable<int> glucoseId)
        {
            var glucoseIdParameter = glucoseId.HasValue ?
                new ObjectParameter("glucoseId", glucoseId) :
                new ObjectParameter("glucoseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGlucoseReading", glucoseIdParameter);
        }
    
        public virtual int DeleteMedicationSchedules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMedicationSchedules");
        }
    
        public virtual int DeleteSurvey(Nullable<int> surveyId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSurvey", surveyIdParameter);
        }
    
        public virtual int DeleteSurveyOption(Nullable<int> optionId)
        {
            var optionIdParameter = optionId.HasValue ?
                new ObjectParameter("optionId", optionId) :
                new ObjectParameter("optionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSurveyOption", optionIdParameter);
        }
    
        public virtual int DeleteSurveyOptionGroup(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("groupId", groupId) :
                new ObjectParameter("groupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSurveyOptionGroup", groupIdParameter);
        }
    
        public virtual int DeleteSurveyQuestion(Nullable<int> questionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSurveyQuestion", questionIdParameter);
        }
    
        public virtual int DeleteSurveyQuestionLogic(Nullable<int> logicId)
        {
            var logicIdParameter = logicId.HasValue ?
                new ObjectParameter("logicId", logicId) :
                new ObjectParameter("logicId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSurveyQuestionLogic", logicIdParameter);
        }
    
        public virtual int DeleteSurveyQuestionOption(Nullable<int> optionId)
        {
            var optionIdParameter = optionId.HasValue ?
                new ObjectParameter("optionId", optionId) :
                new ObjectParameter("optionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSurveyQuestionOption", optionIdParameter);
        }
    
        public virtual int DeleteUserMedication(Nullable<int> userMedicationId)
        {
            var userMedicationIdParameter = userMedicationId.HasValue ?
                new ObjectParameter("userMedicationId", userMedicationId) :
                new ObjectParameter("userMedicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserMedication", userMedicationIdParameter);
        }
    
        public virtual int EditBloodPressureMeasurement(Nullable<int> bloodPressureId, Nullable<int> systolic, Nullable<int> diastolic, Nullable<int> pulse, Nullable<System.DateTime> readingDate, string userId)
        {
            var bloodPressureIdParameter = bloodPressureId.HasValue ?
                new ObjectParameter("bloodPressureId", bloodPressureId) :
                new ObjectParameter("bloodPressureId", typeof(int));
    
            var systolicParameter = systolic.HasValue ?
                new ObjectParameter("systolic", systolic) :
                new ObjectParameter("systolic", typeof(int));
    
            var diastolicParameter = diastolic.HasValue ?
                new ObjectParameter("diastolic", diastolic) :
                new ObjectParameter("diastolic", typeof(int));
    
            var pulseParameter = pulse.HasValue ?
                new ObjectParameter("pulse", pulse) :
                new ObjectParameter("pulse", typeof(int));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("readingDate", readingDate) :
                new ObjectParameter("readingDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditBloodPressureMeasurement", bloodPressureIdParameter, systolicParameter, diastolicParameter, pulseParameter, readingDateParameter, userIdParameter);
        }
    
        public virtual int EditGlucoseMeasurement(Nullable<int> glucoseId, Nullable<int> glucoseLevel, Nullable<System.DateTime> readingDate, string userId)
        {
            var glucoseIdParameter = glucoseId.HasValue ?
                new ObjectParameter("glucoseId", glucoseId) :
                new ObjectParameter("glucoseId", typeof(int));
    
            var glucoseLevelParameter = glucoseLevel.HasValue ?
                new ObjectParameter("glucoseLevel", glucoseLevel) :
                new ObjectParameter("glucoseLevel", typeof(int));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("readingDate", readingDate) :
                new ObjectParameter("readingDate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditGlucoseMeasurement", glucoseIdParameter, glucoseLevelParameter, readingDateParameter, userIdParameter);
        }
    
        public virtual int EmailTardyBPPatients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmailTardyBPPatients");
        }
    
        public virtual ObjectResult<string> EvaluateDynamicPlaceholder(string userId, string expression)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var expressionParameter = expression != null ?
                new ObjectParameter("expression", expression) :
                new ObjectParameter("expression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("EvaluateDynamicPlaceholder", userIdParameter, expressionParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> EvaluateLogic(string userId, string expression)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var expressionParameter = expression != null ?
                new ObjectParameter("expression", expression) :
                new ObjectParameter("expression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("EvaluateLogic", userIdParameter, expressionParameter);
        }
    
        [DbFunction("TransafeRxEntities", "fnGetScheduleDates")]
        public virtual IQueryable<Nullable<System.DateTime>> fnGetScheduleDates(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<byte> dayOfWeek, Nullable<System.TimeSpan> scheduleTime)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var dayOfWeekParameter = dayOfWeek.HasValue ?
                new ObjectParameter("dayOfWeek", dayOfWeek) :
                new ObjectParameter("dayOfWeek", typeof(byte));
    
            var scheduleTimeParameter = scheduleTime.HasValue ?
                new ObjectParameter("scheduleTime", scheduleTime) :
                new ObjectParameter("scheduleTime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<System.DateTime>>("[TransafeRxEntities].[fnGetScheduleDates](@startDate, @endDate, @dayOfWeek, @scheduleTime)", startDateParameter, endDateParameter, dayOfWeekParameter, scheduleTimeParameter);
        }
    
        [DbFunction("TransafeRxEntities", "fnGetUserMedicationScheduleDates")]
        public virtual IQueryable<fnGetUserMedicationScheduleDates_Result> fnGetUserMedicationScheduleDates(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetUserMedicationScheduleDates_Result>("[TransafeRxEntities].[fnGetUserMedicationScheduleDates](@userId, @startDate, @endDate)", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetAllDeviceTokensWithUser_Result> GetAllDeviceTokensWithUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDeviceTokensWithUser_Result>("GetAllDeviceTokensWithUser");
        }
    
        public virtual ObjectResult<GetAllMedicationsNotTakenWindow_Result> GetAllMedicationsNotTakenWindow(Nullable<int> minuteWindow)
        {
            var minuteWindowParameter = minuteWindow.HasValue ?
                new ObjectParameter("minuteWindow", minuteWindow) :
                new ObjectParameter("minuteWindow", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllMedicationsNotTakenWindow_Result>("GetAllMedicationsNotTakenWindow", minuteWindowParameter);
        }
    
        public virtual ObjectResult<GetAllUserNotifications_Result> GetAllUserNotifications(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUserNotifications_Result>("GetAllUserNotifications", userIdParameter);
        }
    
        public virtual ObjectResult<GetAppointments_Result> GetAppointments(string mrn)
        {
            var mrnParameter = mrn != null ?
                new ObjectParameter("mrn", mrn) :
                new ObjectParameter("mrn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAppointments_Result>("GetAppointments", mrnParameter);
        }
    
        public virtual ObjectResult<GetBloodGlucoseMeasurements_Result> GetBloodGlucoseMeasurements(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBloodGlucoseMeasurements_Result>("GetBloodGlucoseMeasurements", userIdParameter);
        }
    
        public virtual ObjectResult<GetBloodPressureMeasurements_Result> GetBloodPressureMeasurements(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBloodPressureMeasurements_Result>("GetBloodPressureMeasurements", userIdParameter);
        }
    
        public virtual ObjectResult<GetBloodPressureMeasurementsChart_Result> GetBloodPressureMeasurementsChart(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> aggType)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var aggTypeParameter = aggType.HasValue ?
                new ObjectParameter("aggType", aggType) :
                new ObjectParameter("aggType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBloodPressureMeasurementsChart_Result>("GetBloodPressureMeasurementsChart", userIdParameter, startDateParameter, endDateParameter, aggTypeParameter);
        }
    
        public virtual ObjectResult<GetCurrentSurveySession_Result> GetCurrentSurveySession(Nullable<int> surveyId, string userId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurrentSurveySession_Result>("GetCurrentSurveySession", surveyIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetDeviceTokensByUser_Result> GetDeviceTokensByUser(string userId, Nullable<int> tokenTypeId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var tokenTypeIdParameter = tokenTypeId.HasValue ?
                new ObjectParameter("tokenTypeId", tokenTypeId) :
                new ObjectParameter("tokenTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeviceTokensByUser_Result>("GetDeviceTokensByUser", userIdParameter, tokenTypeIdParameter);
        }
    
        public virtual ObjectResult<GetEpicPatients_Result> GetEpicPatients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEpicPatients_Result>("GetEpicPatients");
        }
    
        public virtual ObjectResult<GetExternalDrugData_Result> GetExternalDrugData(string mrn)
        {
            var mrnParameter = mrn != null ?
                new ObjectParameter("mrn", mrn) :
                new ObjectParameter("mrn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExternalDrugData_Result>("GetExternalDrugData", mrnParameter);
        }
    
        public virtual ObjectResult<GetGlucoseMeasurementsChart_Result> GetGlucoseMeasurementsChart(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> aggType)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var aggTypeParameter = aggType.HasValue ?
                new ObjectParameter("aggType", aggType) :
                new ObjectParameter("aggType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGlucoseMeasurementsChart_Result>("GetGlucoseMeasurementsChart", userIdParameter, startDateParameter, endDateParameter, aggTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetIsAdmin(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetIsAdmin", userIdParameter);
        }
    
        public virtual ObjectResult<GetItem_Result> GetItem(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItem_Result>("GetItem", itemIdParameter);
        }
    
        public virtual ObjectResult<GetItemLogic_Result> GetItemLogic(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemLogic_Result>("GetItemLogic", itemIdParameter);
        }
    
        public virtual ObjectResult<GetItemNavigation_Result> GetItemNavigation(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemNavigation_Result>("GetItemNavigation", itemIdParameter);
        }
    
        public virtual ObjectResult<GetItemTemplates_Result> GetItemTemplates(Nullable<int> itemTypeId)
        {
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("itemTypeId", itemTypeId) :
                new ObjectParameter("itemTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemTemplates_Result>("GetItemTemplates", itemTypeIdParameter);
        }
    
        public virtual ObjectResult<GetItemToolbarItems_Result> GetItemToolbarItems(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemToolbarItems_Result>("GetItemToolbarItems", itemIdParameter);
        }
    
        public virtual ObjectResult<GetItemTypes_Result> GetItemTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemTypes_Result>("GetItemTypes");
        }
    
        public virtual ObjectResult<GetLatestAppVersionByAppId_Result> GetLatestAppVersionByAppId(Nullable<int> appId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("appId", appId) :
                new ObjectParameter("appId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLatestAppVersionByAppId_Result>("GetLatestAppVersionByAppId", appIdParameter);
        }
    
        public virtual ObjectResult<GetMedAdhMsgs_Result> GetMedAdhMsgs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedAdhMsgs_Result>("GetMedAdhMsgs");
        }
    
        public virtual ObjectResult<GetMedicationAdherenceByMed_Result> GetMedicationAdherenceByMed(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationAdherenceByMed_Result>("GetMedicationAdherenceByMed", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetMedicationAdherenceOverAllScore(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetMedicationAdherenceOverAllScore", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetMedicationSchedules_Result> GetMedicationSchedules(Nullable<int> userMedicationId)
        {
            var userMedicationIdParameter = userMedicationId.HasValue ?
                new ObjectParameter("userMedicationId", userMedicationId) :
                new ObjectParameter("userMedicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationSchedules_Result>("GetMedicationSchedules", userMedicationIdParameter);
        }
    
        public virtual ObjectResult<GetMedicationsNotTaken_Result> GetMedicationsNotTaken(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationsNotTaken_Result>("GetMedicationsNotTaken", userIdParameter);
        }
    
        public virtual ObjectResult<GetMedicationsNotTakenByHour_Result> GetMedicationsNotTakenByHour(string userId, Nullable<int> hour)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var hourParameter = hour.HasValue ?
                new ObjectParameter("hour", hour) :
                new ObjectParameter("hour", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationsNotTakenByHour_Result>("GetMedicationsNotTakenByHour", userIdParameter, hourParameter);
        }
    
        public virtual ObjectResult<GetMedicationsNotTakenWindow_Result> GetMedicationsNotTakenWindow(string userId, Nullable<int> minuteWindow)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var minuteWindowParameter = minuteWindow.HasValue ?
                new ObjectParameter("minuteWindow", minuteWindow) :
                new ObjectParameter("minuteWindow", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicationsNotTakenWindow_Result>("GetMedicationsNotTakenWindow", userIdParameter, minuteWindowParameter);
        }
    
        public virtual ObjectResult<GetMessagesToSend_30_Result> GetMessagesToSend_30()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMessagesToSend_30_Result>("GetMessagesToSend_30");
        }
    
        public virtual int GetNextPersonalizedMessage(Nullable<int> messageTypeId, string userId, Nullable<int> langId, ObjectParameter messageBody, ObjectParameter messageId)
        {
            var messageTypeIdParameter = messageTypeId.HasValue ?
                new ObjectParameter("messageTypeId", messageTypeId) :
                new ObjectParameter("messageTypeId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var langIdParameter = langId.HasValue ?
                new ObjectParameter("langId", langId) :
                new ObjectParameter("langId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNextPersonalizedMessage", messageTypeIdParameter, userIdParameter, langIdParameter, messageBody, messageId);
        }
    
        public virtual int GetNextSequenceId(ObjectParameter id)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNextSequenceId", id);
        }
    
        public virtual ObjectResult<GetNotificationPreferences_Result> GetNotificationPreferences(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNotificationPreferences_Result>("GetNotificationPreferences", userIdParameter);
        }
    
        public virtual ObjectResult<GetNotifications_Result> GetNotifications(string userId, Nullable<int> notificationTypeId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("notificationTypeId", notificationTypeId) :
                new ObjectParameter("notificationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNotifications_Result>("GetNotifications", userIdParameter, notificationTypeIdParameter);
        }
    
        public virtual ObjectResult<GetNotificationTypes_Result> GetNotificationTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNotificationTypes_Result>("GetNotificationTypes");
        }
    
        public virtual ObjectResult<GetPatientSMSHistory_Result> GetPatientSMSHistory(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientSMSHistory_Result>("GetPatientSMSHistory", userIdParameter);
        }
    
        public virtual ObjectResult<GetPhoneNumber_Result> GetPhoneNumber(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPhoneNumber_Result>("GetPhoneNumber", userIdParameter);
        }
    
        public virtual ObjectResult<GetPlaceholders_Result> GetPlaceholders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPlaceholders_Result>("GetPlaceholders");
        }
    
        public virtual ObjectResult<GetPrednisoneRefillData_Result> GetPrednisoneRefillData(string mrn)
        {
            var mrnParameter = mrn != null ?
                new ObjectParameter("mrn", mrn) :
                new ObjectParameter("mrn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPrednisoneRefillData_Result>("GetPrednisoneRefillData", mrnParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetRusselScore(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetRusselScore", userIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int GetRusselScore24Hr(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter russelScore)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRusselScore24Hr", userIdParameter, startDateParameter, endDateParameter, russelScore);
        }
    
        public virtual ObjectResult<GetSchedulesByUserMedicationId_Result> GetSchedulesByUserMedicationId(Nullable<int> userMedicationId, Nullable<bool> inActive)
        {
            var userMedicationIdParameter = userMedicationId.HasValue ?
                new ObjectParameter("userMedicationId", userMedicationId) :
                new ObjectParameter("userMedicationId", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("inActive", inActive) :
                new ObjectParameter("inActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulesByUserMedicationId_Result>("GetSchedulesByUserMedicationId", userMedicationIdParameter, inActiveParameter);
        }
    
        public virtual ObjectResult<GetSurvey_Result> GetSurvey(Nullable<int> surveyId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurvey_Result>("GetSurvey", surveyIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyAnswers_Result> GetSurveyAnswers(Nullable<int> surveyId, string userId, Nullable<int> sessionId, Nullable<int> questionId, Nullable<int> categoryId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyAnswers_Result>("GetSurveyAnswers", surveyIdParameter, userIdParameter, sessionIdParameter, questionIdParameter, categoryIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyOptionGroups_Result> GetSurveyOptionGroups()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyOptionGroups_Result>("GetSurveyOptionGroups");
        }
    
        public virtual ObjectResult<GetSurveyOptions_Result> GetSurveyOptions(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("groupId", groupId) :
                new ObjectParameter("groupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyOptions_Result>("GetSurveyOptions", groupIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyQuestion_Result> GetSurveyQuestion(Nullable<int> questionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyQuestion_Result>("GetSurveyQuestion", questionIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyQuestionCategories_Result> GetSurveyQuestionCategories(Nullable<int> questionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyQuestionCategories_Result>("GetSurveyQuestionCategories", questionIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyQuestionLogic_Result> GetSurveyQuestionLogic(Nullable<int> questionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyQuestionLogic_Result>("GetSurveyQuestionLogic", questionIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyQuestionLogicActions_Result> GetSurveyQuestionLogicActions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyQuestionLogicActions_Result>("GetSurveyQuestionLogicActions");
        }
    
        public virtual ObjectResult<GetSurveyQuestionOptions_Result> GetSurveyQuestionOptions(Nullable<int> questionId, Nullable<int> categoryId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyQuestionOptions_Result>("GetSurveyQuestionOptions", questionIdParameter, categoryIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyQuestions_Result> GetSurveyQuestions(Nullable<int> surveyId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyQuestions_Result>("GetSurveyQuestions", surveyIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyQuestionTypes_Result> GetSurveyQuestionTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyQuestionTypes_Result>("GetSurveyQuestionTypes");
        }
    
        public virtual ObjectResult<GetSurveyResults_Result> GetSurveyResults(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyResults_Result>("GetSurveyResults", userIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyResultsBySessionId_Result> GetSurveyResultsBySessionId(Nullable<int> sessionId)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyResultsBySessionId_Result>("GetSurveyResultsBySessionId", sessionIdParameter);
        }
    
        public virtual ObjectResult<GetSurveys_Result> GetSurveys()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveys_Result>("GetSurveys");
        }
    
        public virtual int GetSurveyScore(string userId, ObjectParameter score, ObjectParameter hasRiskAnswer)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSurveyScore", userIdParameter, score, hasRiskAnswer);
        }
    
        public virtual ObjectResult<GetSurveyScoresForUser_Result> GetSurveyScoresForUser(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyScoresForUser_Result>("GetSurveyScoresForUser", userIdParameter);
        }
    
        public virtual ObjectResult<GetSurveySession_Result> GetSurveySession(Nullable<int> sessionId)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveySession_Result>("GetSurveySession", sessionIdParameter);
        }
    
        public virtual ObjectResult<GetTacrolimusResults_Result> GetTacrolimusResults(string mrn)
        {
            var mrnParameter = mrn != null ?
                new ObjectParameter("mrn", mrn) :
                new ObjectParameter("mrn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTacrolimusResults_Result>("GetTacrolimusResults", mrnParameter);
        }
    
        public virtual ObjectResult<string> GetTokenUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetTokenUsers");
        }
    
        public virtual ObjectResult<GetToolbarItemNavigation_Result> GetToolbarItemNavigation(Nullable<int> toolbarItemId)
        {
            var toolbarItemIdParameter = toolbarItemId.HasValue ?
                new ObjectParameter("toolbarItemId", toolbarItemId) :
                new ObjectParameter("toolbarItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetToolbarItemNavigation_Result>("GetToolbarItemNavigation", toolbarItemIdParameter);
        }
    
        public virtual ObjectResult<GetUser_Result> GetUser(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUser_Result>("GetUser", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetUserAdmission(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetUserAdmission", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserHasLatestAppVersion_Result> GetUserHasLatestAppVersion(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserHasLatestAppVersion_Result>("GetUserHasLatestAppVersion", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserMedicationById_Result> GetUserMedicationById(Nullable<int> userMedicationId)
        {
            var userMedicationIdParameter = userMedicationId.HasValue ?
                new ObjectParameter("userMedicationId", userMedicationId) :
                new ObjectParameter("userMedicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserMedicationById_Result>("GetUserMedicationById", userMedicationIdParameter);
        }
    
        public virtual ObjectResult<GetUserMedications_Result> GetUserMedications(string userId, Nullable<bool> inActive)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("inActive", inActive) :
                new ObjectParameter("inActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserMedications_Result>("GetUserMedications", userIdParameter, inActiveParameter);
        }
    
        public virtual ObjectResult<GetUserMedicationsAPIByUserId_Result> GetUserMedicationsAPIByUserId(string userId, Nullable<bool> inActive)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("inActive", inActive) :
                new ObjectParameter("inActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserMedicationsAPIByUserId_Result>("GetUserMedicationsAPIByUserId", userIdParameter, inActiveParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetUserPersonalizedSurveyTaken(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetUserPersonalizedSurveyTaken", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserRoles_Result> GetUserRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserRoles_Result>("GetUserRoles");
        }
    
        public virtual ObjectResult<GetUsers_Result> GetUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsers_Result>("GetUsers");
        }
    
        public virtual ObjectResult<string> GetUserTimeZone(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUserTimeZone", userIdParameter);
        }
    
        public virtual int InsertPatientMedPhase(string p_userID, Nullable<int> p_phaseID, Nullable<System.DateTime> p_adhDate, Nullable<bool> p_adherence, Nullable<int> p_phaseDayCount)
        {
            var p_userIDParameter = p_userID != null ?
                new ObjectParameter("p_userID", p_userID) :
                new ObjectParameter("p_userID", typeof(string));
    
            var p_phaseIDParameter = p_phaseID.HasValue ?
                new ObjectParameter("p_phaseID", p_phaseID) :
                new ObjectParameter("p_phaseID", typeof(int));
    
            var p_adhDateParameter = p_adhDate.HasValue ?
                new ObjectParameter("p_adhDate", p_adhDate) :
                new ObjectParameter("p_adhDate", typeof(System.DateTime));
    
            var p_adherenceParameter = p_adherence.HasValue ?
                new ObjectParameter("p_adherence", p_adherence) :
                new ObjectParameter("p_adherence", typeof(bool));
    
            var p_phaseDayCountParameter = p_phaseDayCount.HasValue ?
                new ObjectParameter("p_phaseDayCount", p_phaseDayCount) :
                new ObjectParameter("p_phaseDayCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPatientMedPhase", p_userIDParameter, p_phaseIDParameter, p_adhDateParameter, p_adherenceParameter, p_phaseDayCountParameter);
        }
    
        public virtual int InsertPatientMessageSent(string patientID, string messageText, Nullable<System.DateTime> sentTime, Nullable<int> messageID, string twilioSID, string twilioStatus, string twilioError)
        {
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            var messageTextParameter = messageText != null ?
                new ObjectParameter("messageText", messageText) :
                new ObjectParameter("messageText", typeof(string));
    
            var sentTimeParameter = sentTime.HasValue ?
                new ObjectParameter("sentTime", sentTime) :
                new ObjectParameter("sentTime", typeof(System.DateTime));
    
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("messageID", messageID) :
                new ObjectParameter("messageID", typeof(int));
    
            var twilioSIDParameter = twilioSID != null ?
                new ObjectParameter("twilioSID", twilioSID) :
                new ObjectParameter("twilioSID", typeof(string));
    
            var twilioStatusParameter = twilioStatus != null ?
                new ObjectParameter("twilioStatus", twilioStatus) :
                new ObjectParameter("twilioStatus", typeof(string));
    
            var twilioErrorParameter = twilioError != null ?
                new ObjectParameter("twilioError", twilioError) :
                new ObjectParameter("twilioError", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPatientMessageSent", patientIDParameter, messageTextParameter, sentTimeParameter, messageIDParameter, twilioSIDParameter, twilioStatusParameter, twilioErrorParameter);
        }
    
        public virtual int SetMedicationSchedulesInactive(Nullable<bool> inactive)
        {
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("inactive", inactive) :
                new ObjectParameter("inactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetMedicationSchedulesInactive", inactiveParameter);
        }
    
        public virtual int UpdateAggregateMedReviewed()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAggregateMedReviewed");
        }
    
        public virtual int UpdateAllUsersMedicationAdherenceOverAllScore(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAllUsersMedicationAdherenceOverAllScore", startDateParameter, endDateParameter);
        }
    
        public virtual int UpdateAllUsersMedicationRefillAdherenceScores()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAllUsersMedicationRefillAdherenceScores");
        }
    
        public virtual int UpdateDateMedsReviewed(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDateMedsReviewed", userIdParameter);
        }
    
        public virtual int UpdateItemDesign(Nullable<int> itemId, string headerTitle, string headerImage, Nullable<int> headerFontId, Nullable<int> headerFontSize, string headerColor, string headerBackgroundColor, string headerBackgroundImage, Nullable<int> headerEffect, Nullable<int> backButtonType, string backButtonColor, string backButtonBackgroundColor, Nullable<int> bodyFontId, Nullable<int> bodyFontSize, string bodyColor, string bodyBackgroundColor, string bodyBackgroundImage)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            var headerTitleParameter = headerTitle != null ?
                new ObjectParameter("headerTitle", headerTitle) :
                new ObjectParameter("headerTitle", typeof(string));
    
            var headerImageParameter = headerImage != null ?
                new ObjectParameter("headerImage", headerImage) :
                new ObjectParameter("headerImage", typeof(string));
    
            var headerFontIdParameter = headerFontId.HasValue ?
                new ObjectParameter("headerFontId", headerFontId) :
                new ObjectParameter("headerFontId", typeof(int));
    
            var headerFontSizeParameter = headerFontSize.HasValue ?
                new ObjectParameter("headerFontSize", headerFontSize) :
                new ObjectParameter("headerFontSize", typeof(int));
    
            var headerColorParameter = headerColor != null ?
                new ObjectParameter("headerColor", headerColor) :
                new ObjectParameter("headerColor", typeof(string));
    
            var headerBackgroundColorParameter = headerBackgroundColor != null ?
                new ObjectParameter("headerBackgroundColor", headerBackgroundColor) :
                new ObjectParameter("headerBackgroundColor", typeof(string));
    
            var headerBackgroundImageParameter = headerBackgroundImage != null ?
                new ObjectParameter("headerBackgroundImage", headerBackgroundImage) :
                new ObjectParameter("headerBackgroundImage", typeof(string));
    
            var headerEffectParameter = headerEffect.HasValue ?
                new ObjectParameter("headerEffect", headerEffect) :
                new ObjectParameter("headerEffect", typeof(int));
    
            var backButtonTypeParameter = backButtonType.HasValue ?
                new ObjectParameter("backButtonType", backButtonType) :
                new ObjectParameter("backButtonType", typeof(int));
    
            var backButtonColorParameter = backButtonColor != null ?
                new ObjectParameter("backButtonColor", backButtonColor) :
                new ObjectParameter("backButtonColor", typeof(string));
    
            var backButtonBackgroundColorParameter = backButtonBackgroundColor != null ?
                new ObjectParameter("backButtonBackgroundColor", backButtonBackgroundColor) :
                new ObjectParameter("backButtonBackgroundColor", typeof(string));
    
            var bodyFontIdParameter = bodyFontId.HasValue ?
                new ObjectParameter("bodyFontId", bodyFontId) :
                new ObjectParameter("bodyFontId", typeof(int));
    
            var bodyFontSizeParameter = bodyFontSize.HasValue ?
                new ObjectParameter("bodyFontSize", bodyFontSize) :
                new ObjectParameter("bodyFontSize", typeof(int));
    
            var bodyColorParameter = bodyColor != null ?
                new ObjectParameter("bodyColor", bodyColor) :
                new ObjectParameter("bodyColor", typeof(string));
    
            var bodyBackgroundColorParameter = bodyBackgroundColor != null ?
                new ObjectParameter("bodyBackgroundColor", bodyBackgroundColor) :
                new ObjectParameter("bodyBackgroundColor", typeof(string));
    
            var bodyBackgroundImageParameter = bodyBackgroundImage != null ?
                new ObjectParameter("bodyBackgroundImage", bodyBackgroundImage) :
                new ObjectParameter("bodyBackgroundImage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateItemDesign", itemIdParameter, headerTitleParameter, headerImageParameter, headerFontIdParameter, headerFontSizeParameter, headerColorParameter, headerBackgroundColorParameter, headerBackgroundImageParameter, headerEffectParameter, backButtonTypeParameter, backButtonColorParameter, backButtonBackgroundColorParameter, bodyFontIdParameter, bodyFontSizeParameter, bodyColorParameter, bodyBackgroundColorParameter, bodyBackgroundImageParameter);
        }
    
        public virtual int UpdateMsgSendQueue(Nullable<int> mqId)
        {
            var mqIdParameter = mqId.HasValue ?
                new ObjectParameter("mqId", mqId) :
                new ObjectParameter("mqId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMsgSendQueue", mqIdParameter);
        }
    
        public virtual int UpdateNeedDischarge()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNeedDischarge");
        }
    
        public virtual int UpdateSentMsgs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSentMsgs");
        }
    
        public virtual int UpdateSurveyData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSurveyData");
        }
    
        public virtual int UpdateSurveyDesign(Nullable<int> surveyId, string listColor, string listBackgroundColor, Nullable<decimal> listBackgroundAlpha, Nullable<int> listFontId, Nullable<int> listFontSize, string selectedColor, string selectedBackgroundColor, Nullable<decimal> selectedBackgroundAlpha, Nullable<int> selectedFontId, Nullable<int> selectedFontSize, Nullable<int> selectedIconType, string selectedIconColor, string buttonColor, string buttonBackgroundColor, Nullable<decimal> buttonBackgroundAlpha, Nullable<int> buttonFontId, Nullable<int> buttonFontSize, string progressBarColor, string progressBarBackgroundColor, Nullable<decimal> progressBarBackgroundAlpha, string tooltipColor, string tooltipBackgroundColor, Nullable<decimal> tooltipBackgroundAlpha, Nullable<int> tooltipFontId, Nullable<int> tooltipFontSize)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("surveyId", surveyId) :
                new ObjectParameter("surveyId", typeof(int));
    
            var listColorParameter = listColor != null ?
                new ObjectParameter("listColor", listColor) :
                new ObjectParameter("listColor", typeof(string));
    
            var listBackgroundColorParameter = listBackgroundColor != null ?
                new ObjectParameter("listBackgroundColor", listBackgroundColor) :
                new ObjectParameter("listBackgroundColor", typeof(string));
    
            var listBackgroundAlphaParameter = listBackgroundAlpha.HasValue ?
                new ObjectParameter("listBackgroundAlpha", listBackgroundAlpha) :
                new ObjectParameter("listBackgroundAlpha", typeof(decimal));
    
            var listFontIdParameter = listFontId.HasValue ?
                new ObjectParameter("listFontId", listFontId) :
                new ObjectParameter("listFontId", typeof(int));
    
            var listFontSizeParameter = listFontSize.HasValue ?
                new ObjectParameter("listFontSize", listFontSize) :
                new ObjectParameter("listFontSize", typeof(int));
    
            var selectedColorParameter = selectedColor != null ?
                new ObjectParameter("selectedColor", selectedColor) :
                new ObjectParameter("selectedColor", typeof(string));
    
            var selectedBackgroundColorParameter = selectedBackgroundColor != null ?
                new ObjectParameter("selectedBackgroundColor", selectedBackgroundColor) :
                new ObjectParameter("selectedBackgroundColor", typeof(string));
    
            var selectedBackgroundAlphaParameter = selectedBackgroundAlpha.HasValue ?
                new ObjectParameter("selectedBackgroundAlpha", selectedBackgroundAlpha) :
                new ObjectParameter("selectedBackgroundAlpha", typeof(decimal));
    
            var selectedFontIdParameter = selectedFontId.HasValue ?
                new ObjectParameter("selectedFontId", selectedFontId) :
                new ObjectParameter("selectedFontId", typeof(int));
    
            var selectedFontSizeParameter = selectedFontSize.HasValue ?
                new ObjectParameter("selectedFontSize", selectedFontSize) :
                new ObjectParameter("selectedFontSize", typeof(int));
    
            var selectedIconTypeParameter = selectedIconType.HasValue ?
                new ObjectParameter("selectedIconType", selectedIconType) :
                new ObjectParameter("selectedIconType", typeof(int));
    
            var selectedIconColorParameter = selectedIconColor != null ?
                new ObjectParameter("selectedIconColor", selectedIconColor) :
                new ObjectParameter("selectedIconColor", typeof(string));
    
            var buttonColorParameter = buttonColor != null ?
                new ObjectParameter("buttonColor", buttonColor) :
                new ObjectParameter("buttonColor", typeof(string));
    
            var buttonBackgroundColorParameter = buttonBackgroundColor != null ?
                new ObjectParameter("buttonBackgroundColor", buttonBackgroundColor) :
                new ObjectParameter("buttonBackgroundColor", typeof(string));
    
            var buttonBackgroundAlphaParameter = buttonBackgroundAlpha.HasValue ?
                new ObjectParameter("buttonBackgroundAlpha", buttonBackgroundAlpha) :
                new ObjectParameter("buttonBackgroundAlpha", typeof(decimal));
    
            var buttonFontIdParameter = buttonFontId.HasValue ?
                new ObjectParameter("buttonFontId", buttonFontId) :
                new ObjectParameter("buttonFontId", typeof(int));
    
            var buttonFontSizeParameter = buttonFontSize.HasValue ?
                new ObjectParameter("buttonFontSize", buttonFontSize) :
                new ObjectParameter("buttonFontSize", typeof(int));
    
            var progressBarColorParameter = progressBarColor != null ?
                new ObjectParameter("progressBarColor", progressBarColor) :
                new ObjectParameter("progressBarColor", typeof(string));
    
            var progressBarBackgroundColorParameter = progressBarBackgroundColor != null ?
                new ObjectParameter("progressBarBackgroundColor", progressBarBackgroundColor) :
                new ObjectParameter("progressBarBackgroundColor", typeof(string));
    
            var progressBarBackgroundAlphaParameter = progressBarBackgroundAlpha.HasValue ?
                new ObjectParameter("progressBarBackgroundAlpha", progressBarBackgroundAlpha) :
                new ObjectParameter("progressBarBackgroundAlpha", typeof(decimal));
    
            var tooltipColorParameter = tooltipColor != null ?
                new ObjectParameter("tooltipColor", tooltipColor) :
                new ObjectParameter("tooltipColor", typeof(string));
    
            var tooltipBackgroundColorParameter = tooltipBackgroundColor != null ?
                new ObjectParameter("tooltipBackgroundColor", tooltipBackgroundColor) :
                new ObjectParameter("tooltipBackgroundColor", typeof(string));
    
            var tooltipBackgroundAlphaParameter = tooltipBackgroundAlpha.HasValue ?
                new ObjectParameter("tooltipBackgroundAlpha", tooltipBackgroundAlpha) :
                new ObjectParameter("tooltipBackgroundAlpha", typeof(decimal));
    
            var tooltipFontIdParameter = tooltipFontId.HasValue ?
                new ObjectParameter("tooltipFontId", tooltipFontId) :
                new ObjectParameter("tooltipFontId", typeof(int));
    
            var tooltipFontSizeParameter = tooltipFontSize.HasValue ?
                new ObjectParameter("tooltipFontSize", tooltipFontSize) :
                new ObjectParameter("tooltipFontSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSurveyDesign", surveyIdParameter, listColorParameter, listBackgroundColorParameter, listBackgroundAlphaParameter, listFontIdParameter, listFontSizeParameter, selectedColorParameter, selectedBackgroundColorParameter, selectedBackgroundAlphaParameter, selectedFontIdParameter, selectedFontSizeParameter, selectedIconTypeParameter, selectedIconColorParameter, buttonColorParameter, buttonBackgroundColorParameter, buttonBackgroundAlphaParameter, buttonFontIdParameter, buttonFontSizeParameter, progressBarColorParameter, progressBarBackgroundColorParameter, progressBarBackgroundAlphaParameter, tooltipColorParameter, tooltipBackgroundColorParameter, tooltipBackgroundAlphaParameter, tooltipFontIdParameter, tooltipFontSizeParameter);
        }
    
        public virtual int UpdateTacrolimusValues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTacrolimusValues");
        }
    
        public virtual int AddLink(Nullable<int> linkZoneId, Nullable<int> canonicalZoneId)
        {
            var linkZoneIdParameter = linkZoneId.HasValue ?
                new ObjectParameter("LinkZoneId", linkZoneId) :
                new ObjectParameter("LinkZoneId", typeof(int));
    
            var canonicalZoneIdParameter = canonicalZoneId.HasValue ?
                new ObjectParameter("CanonicalZoneId", canonicalZoneId) :
                new ObjectParameter("CanonicalZoneId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLink", linkZoneIdParameter, canonicalZoneIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddZone(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddZone", nameParameter);
        }
    
        public virtual int SetIntervals(Nullable<int> zoneId)
        {
            var zoneIdParameter = zoneId.HasValue ?
                new ObjectParameter("ZoneId", zoneId) :
                new ObjectParameter("ZoneId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetIntervals", zoneIdParameter);
        }
    
        public virtual int SetVersion(string version)
        {
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetVersion", versionParameter);
        }
    
        public virtual int DeleteMedicationSchedulesByMedId(Nullable<int> userMedicationId)
        {
            var userMedicationIdParameter = userMedicationId.HasValue ?
                new ObjectParameter("userMedicationId", userMedicationId) :
                new ObjectParameter("userMedicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMedicationSchedulesByMedId", userMedicationIdParameter);
        }
    
        public virtual ObjectResult<GetBloodGlucoseMeasurementsMonth_Result> GetBloodGlucoseMeasurementsMonth(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBloodGlucoseMeasurementsMonth_Result>("GetBloodGlucoseMeasurementsMonth", userIdParameter);
        }
    
        public virtual int RunUserDataCalculations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunUserDataCalculations");
        }
    
        public virtual int UpdateDeviceTokenExpired(Nullable<int> tokenId, Nullable<bool> isExpired)
        {
            var tokenIdParameter = tokenId.HasValue ?
                new ObjectParameter("tokenId", tokenId) :
                new ObjectParameter("tokenId", typeof(int));
    
            var isExpiredParameter = isExpired.HasValue ?
                new ObjectParameter("isExpired", isExpired) :
                new ObjectParameter("isExpired", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDeviceTokenExpired", tokenIdParameter, isExpiredParameter);
        }
    }
}
